// http://geoexamples.com/path-properties/ v1.3.0 Copyright 2025 Roger Veciana i Rovira
'use strict'; let t; const e = Object.defineProperty; const n = Object.getOwnPropertyDescriptor; const h = Object.getOwnPropertyNames; const i = Object.prototype.hasOwnProperty; const s = (t, n) => e(t, 'name', { value: n, configurable: !0 }); const g = {}; ((t, n) => { for (const h in n)e(t, h, { get: n[h], enumerable: !0 }) })(g, { svgPathProperties: () => F }), module.exports = (t = g, ((t, s, g, a) => { if (s && typeof s === 'object' || typeof s === 'function') for (const r of h(s))i.call(t, r) || r === g || e(t, r, { get: () => s[r], enumerable: !(a = n(s, r)) || a.enumerable }); return t })(e({}, '__esModule', { value: !0 }), t)); const a = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 }; const r = /([astvzqmhlc])([^astvzqmhlc]*)/gi; const o = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi; const l = s(t => { const e = (t && t.length > 0 ? t : 'M0,0').match(r); if (!e) throw new Error(`No path elements found in string ${t}`); return e.reduce((t, e) => { let n = e.charAt(0); let h = n.toLowerCase(); let i = c(e.substring(1)); if (h === 'm' && i.length > 2 && (t.push([n, ...i.splice(0, 2)]), h = 'l', n = n === 'm' ? 'l' : 'L'), h.toLowerCase() === 'a' && (i.length === 5 || i.length === 6)) { const t = e.substring(1).trim().split(' '); i = [Number(t[0]), Number(t[1]), Number(t[2]), Number(t[3].charAt(0)), Number(t[3].charAt(1)), Number(t[3].substring(2)), Number(t[4])] } for (;i.length >= 0;) { if (i.length === a[h]) { t.push([n, ...i.splice(0, a[h])]); break } if (i.length < a[h]) throw new Error(`Malformed path data: "${n}" must have ${a[h]} elements and has ${i.length}: ${e}`); t.push([n, ...i.splice(0, a[h])]) } return t }, []) }, 'default'); var c = s(t => { const e = t.match(o); return e ? e.map(Number) : [] }, 'parseValues'); const u = class {static { s(this, 'LinearPosition') }x0; x1; y0; y1; constructor (t, e, n, h) { this.x0 = t, this.x1 = e, this.y0 = n, this.y1 = h }getTotalLength = s(() => Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2)), 'getTotalLength'); getPointAtLength = s(t => { let e = t / Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2)); e = Number.isNaN(e) ? 1 : e; const n = (this.x1 - this.x0) * e; const h = (this.y1 - this.y0) * e; return { x: this.x0 + n, y: this.y0 + h } }, 'getPointAtLength'); getTangentAtLength = s(t => { const e = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) + (this.y1 - this.y0) * (this.y1 - this.y0)); return { x: (this.x1 - this.x0) / e, y: (this.y1 - this.y0) / e } }, 'getTangentAtLength'); getPropertiesAtLength = s(t => { const e = this.getPointAtLength(t); const n = this.getTangentAtLength(t); return { x: e.x, y: e.y, tangentX: n.x, tangentY: n.y } }, 'getPropertiesAtLength')}; const p = class {static { s(this, 'Arc') }x0; y0; rx; ry; xAxisRotate; LargeArcFlag; SweepFlag; x1; y1; length; constructor (t, e, n, h, i, s, g, a, r) { this.x0 = t, this.y0 = e, this.rx = n, this.ry = h, this.xAxisRotate = i, this.LargeArcFlag = s, this.SweepFlag = g, this.x1 = a, this.y1 = r; const o = y(300, function (o) { return x({ x: t, y: e }, n, h, i, s, g, { x: a, y: r }, o) }); this.length = o.arcLength }getTotalLength = s(() => this.length, 'getTotalLength'); getPointAtLength = s(t => { t < 0 ? t = 0 : t > this.length && (t = this.length); const e = x({ x: this.x0, y: this.y0 }, this.rx, this.ry, this.xAxisRotate, this.LargeArcFlag, this.SweepFlag, { x: this.x1, y: this.y1 }, t / this.length); return { x: e.x, y: e.y } }, 'getPointAtLength'); getTangentAtLength = s(t => { t < 0 ? t = 0 : t > this.length && (t = this.length); const e = 0.05; const n = this.getPointAtLength(t); let h; t < 0 ? t = 0 : t > this.length && (t = this.length), h = t < this.length - e ? this.getPointAtLength(t + e) : this.getPointAtLength(t - e); const i = h.x - n.x; const s = h.y - n.y; const g = Math.sqrt(i * i + s * s); return t < this.length - e ? { x: -i / g, y: -s / g } : { x: i / g, y: s / g } }, 'getTangentAtLength'); getPropertiesAtLength = s(t => { const e = this.getTangentAtLength(t); const n = this.getPointAtLength(t); return { x: n.x, y: n.y, tangentX: e.x, tangentY: e.y } }, 'getPropertiesAtLength')}; var x = s((t, e, n, h, i, s, g, a) => { e = Math.abs(e), n = Math.abs(n), h = f(h, 360); const r = L(h); if (t.x === g.x && t.y === g.y) return { x: t.x, y: t.y, ellipticalArcAngle: 0 }; if (e === 0 || n === 0) return { x: 0, y: 0, ellipticalArcAngle: 0 }; const o = (t.x - g.x) / 2; const l = (t.y - g.y) / 2; const c = { x: Math.cos(r) * o + Math.sin(r) * l, y: -Math.sin(r) * o + Math.cos(r) * l }; const u = Math.pow(c.x, 2) / Math.pow(e, 2) + Math.pow(c.y, 2) / Math.pow(n, 2); u > 1 && (e = Math.sqrt(u) * e, n = Math.sqrt(u) * n); let p = (Math.pow(e, 2) * Math.pow(n, 2) - Math.pow(e, 2) * Math.pow(c.y, 2) - Math.pow(n, 2) * Math.pow(c.x, 2)) / (Math.pow(e, 2) * Math.pow(c.y, 2) + Math.pow(n, 2) * Math.pow(c.x, 2)); p = p < 0 ? 0 : p; const x = (i !== s ? 1 : -1) * Math.sqrt(p); const y = x * (e * c.y / n); const A = x * (-n * c.x / e); const M = { x: Math.cos(r) * y - Math.sin(r) * A + (t.x + g.x) / 2, y: Math.sin(r) * y + Math.cos(r) * A + (t.y + g.y) / 2 }; const P = { x: (c.x - y) / e, y: (c.y - A) / n }; const b = w({ x: 1, y: 0 }, P); let d = w(P, { x: (-c.x - y) / e, y: (-c.y - A) / n }); !s && d > 0 ? d -= 2 * Math.PI : s && d < 0 && (d += 2 * Math.PI), d %= 2 * Math.PI; const T = b + d * a; const v = e * Math.cos(T); const m = n * Math.sin(T); return { x: Math.cos(r) * v - Math.sin(r) * m + M.x, y: Math.sin(r) * v + Math.cos(r) * m + M.y, ellipticalArcStartAngle: b, ellipticalArcEndAngle: b + d, ellipticalArcAngle: T, ellipticalArcCenter: M, resultantRx: e, resultantRy: n } }, 'pointOnEllipticalArc'); var y = s((t, e) => { t = t ?? 500; let n = 0; const h = []; const i = []; let s; let g = e(0); for (let a = 0; a < t; a++) { const r = M(a * (1 / t), 0, 1); s = e(r), n += A(g, s), i.push([g, s]), h.push({ t: r, arcLength: n }), g = s } return s = e(1), i.push([g, s]), n += A(g, s), h.push({ t: 1, arcLength: n }), { arcLength: n, arcLengthMap: h, approximationLines: i } }, 'approximateArcLengthOfCurve'); var f = s((t, e) => (t % e + e) % e, 'mod'); var L = s(t => t * (Math.PI / 180), 'toRadians'); var A = s((t, e) => Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)), 'distance'); var M = s((t, e, n) => Math.min(Math.max(t, e), n), 'clamp'); var w = s((t, e) => { const n = t.x * e.x + t.y * e.y; const h = Math.sqrt((Math.pow(t.x, 2) + Math.pow(t.y, 2)) * (Math.pow(e.x, 2) + Math.pow(e.y, 2))); return (t.x * e.y - t.y * e.x < 0 ? -1 : 1) * Math.acos(n / h) }, 'angleBetween'); const P = [[], [], [-0.5773502691896257, 0.5773502691896258], [0, -0.7745966692414833, 0.7745966692414833], [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526], [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664], [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152, 0.932469514203152], [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585, 0.9491079123427585], [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363], [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904], [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717], [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118, -0.7301520055740494, 0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057], [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175, 0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749, -0.9815606342467192, 0.9815606342467192], [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687, -0.6423493394403402, 0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779, -0.9841830547185881, 0.9841830547185881], [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541, 0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765, -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123], [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634, -0.5709721726085388, 0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272, -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854], [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737, 0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003, -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499, 0.9894009349916499], [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763, -0.5126905370864769, 0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014, -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174, 0.9905754753144174], [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263, 0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532, -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977, 0.9558239495713977, -0.9915651684209309, 0.9915651684209309], [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983, -0.46457074137596094, 0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294, -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483, 0.96020815213483, -0.9924068438435844, 0.9924068438435844], [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507, -0.37370608871541955, 0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515, -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326, 0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949], [0, -0.1455618541608951, 0.1455618541608951, -0.2880213168024011, 0.2880213168024011, -0.4243421202074388, 0.4243421202074388, -0.5516188358872198, 0.5516188358872198, -0.6671388041974123, 0.6671388041974123, -0.7684399634756779, 0.7684399634756779, -0.8533633645833173, 0.8533633645833173, -0.9200993341504008, 0.9200993341504008, -0.9672268385663063, 0.9672268385663063, -0.9937521706203895, 0.9937521706203895], [-0.06973927331972223, 0.06973927331972223, -0.20786042668822127, 0.20786042668822127, -0.34193582089208424, 0.34193582089208424, -0.469355837986757, 0.469355837986757, -0.5876404035069116, 0.5876404035069116, -0.6944872631866827, 0.6944872631866827, -0.7878168059792081, 0.7878168059792081, -0.8658125777203002, 0.8658125777203002, -0.926956772187174, 0.926956772187174, -0.9700604978354287, 0.9700604978354287, -0.9942945854823992, 0.9942945854823992], [0, -0.1332568242984661, 0.1332568242984661, -0.26413568097034495, 0.26413568097034495, -0.3903010380302908, 0.3903010380302908, -0.5095014778460075, 0.5095014778460075, -0.6196098757636461, 0.6196098757636461, -0.7186613631319502, 0.7186613631319502, -0.8048884016188399, 0.8048884016188399, -0.8767523582704416, 0.8767523582704416, -0.9329710868260161, 0.9329710868260161, -0.9725424712181152, 0.9725424712181152, -0.9947693349975522, 0.9947693349975522], [-0.06405689286260563, 0.06405689286260563, -0.1911188674736163, 0.1911188674736163, -0.3150426796961634, 0.3150426796961634, -0.4337935076260451, 0.4337935076260451, -0.5454214713888396, 0.5454214713888396, -0.6480936519369755, 0.6480936519369755, -0.7401241915785544, 0.7401241915785544, -0.820001985973903, 0.820001985973903, -0.8864155270044011, 0.8864155270044011, -0.9382745520027328, 0.9382745520027328, -0.9747285559713095, 0.9747285559713095, -0.9951872199970213, 0.9951872199970213]]; const b = [[], [], [1, 1], [0.8888888888888888, 0.5555555555555556, 0.5555555555555556], [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385], [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908], [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036, 0.17132449237917036], [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664, 0.1294849661688697, 0.1294849661688697], [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448, 0.22238103445337448, 0.10122853629037626, 0.10122853629037626], [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441, 0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544], [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204, 0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814], [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048, 0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366, 0.05566856711617366], [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592, 0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843, 0.04717533638651183, 0.04717533638651183], [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885, 0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845, 0.09212149983772845, 0.04048400476531588, 0.04048400476531588], [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782, 0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319, 0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186], [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622, 0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194, 0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727], [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254, 0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388, 0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894, 0.027152459411754096, 0.027152459411754096], [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004, 0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397, 0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872, 0.02414830286854793, 0.02414830286854793], [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524, 0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846, 0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698, 0.0497145488949698, 0.02161601352648331, 0.02161601352648331], [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967, 0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399, 0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123, 0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478], [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204, 0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841, 0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907, 0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118], [0.14608113364969041, 0.14452440398997005, 0.14452440398997005, 0.13988739479107315, 0.13988739479107315, 0.13226893863333747, 0.13226893863333747, 0.12183141605372853, 0.12183141605372853, 0.10879729916714838, 0.10879729916714838, 0.09344442345603386, 0.09344442345603386, 0.0761001136283793, 0.0761001136283793, 0.057134425426857205, 0.057134425426857205, 0.036953789770852494, 0.036953789770852494, 0.016017228257774335, 0.016017228257774335], [0.13925187285563198, 0.13925187285563198, 0.13654149834601517, 0.13654149834601517, 0.13117350478706238, 0.13117350478706238, 0.12325237681051242, 0.12325237681051242, 0.11293229608053922, 0.11293229608053922, 0.10041414444288096, 0.10041414444288096, 0.08594160621706773, 0.08594160621706773, 0.06979646842452049, 0.06979646842452049, 0.052293335152683286, 0.052293335152683286, 0.03377490158481415, 0.03377490158481415, 0.0146279952982722, 0.0146279952982722], [0.13365457218610619, 0.1324620394046966, 0.1324620394046966, 0.12890572218808216, 0.12890572218808216, 0.12304908430672953, 0.12304908430672953, 0.11499664022241136, 0.11499664022241136, 0.10489209146454141, 0.10489209146454141, 0.09291576606003515, 0.09291576606003515, 0.07928141177671895, 0.07928141177671895, 0.06423242140852585, 0.06423242140852585, 0.04803767173108467, 0.04803767173108467, 0.030988005856979445, 0.030988005856979445, 0.013411859487141771, 0.013411859487141771], [0.12793819534675216, 0.12793819534675216, 0.1258374563468283, 0.1258374563468283, 0.12167047292780339, 0.12167047292780339, 0.1155056680537256, 0.1155056680537256, 0.10744427011596563, 0.10744427011596563, 0.09761865210411388, 0.09761865210411388, 0.08619016153195327, 0.08619016153195327, 0.0733464814110803, 0.0733464814110803, 0.05929858491543678, 0.05929858491543678, 0.04427743881741981, 0.04427743881741981, 0.028531388628933663, 0.028531388628933663, 0.0123412297999872, 0.0123412297999872]]; const d = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]; const T = s((t, e, n) => ({ x: (1 - n) * (1 - n) * (1 - n) * t[0] + 3 * (1 - n) * (1 - n) * n * t[1] + 3 * (1 - n) * n * n * t[2] + n * n * n * t[3], y: (1 - n) * (1 - n) * (1 - n) * e[0] + 3 * (1 - n) * (1 - n) * n * e[1] + 3 * (1 - n) * n * n * e[2] + n * n * n * e[3] }), 'cubicPoint'); const v = s((t, e, n) => q([3 * (t[1] - t[0]), 3 * (t[2] - t[1]), 3 * (t[3] - t[2])], [3 * (e[1] - e[0]), 3 * (e[2] - e[1]), 3 * (e[3] - e[2])], n), 'cubicDerivative'); const m = s((t, e, n) => { let h, i; const s = n / 2; h = 0; for (let n = 0; n < 20; n++)i = s * P[20][n] + s, h += b[20][n] * O(t, e, i); return s * h }, 'getCubicArcLength'); var q = s((t, e, n) => ({ x: (1 - n) * (1 - n) * t[0] + 2 * (1 - n) * n * t[1] + n * n * t[2], y: (1 - n) * (1 - n) * e[0] + 2 * (1 - n) * n * e[1] + n * n * e[2] }), 'quadraticPoint'); const _ = s((t, e, n) => { void 0 === n && (n = 1); const h = t[0] - 2 * t[1] + t[2]; const i = e[0] - 2 * e[1] + e[2]; const s = 2 * t[1] - 2 * t[0]; const g = 2 * e[1] - 2 * e[0]; const a = 4 * (h * h + i * i); const r = 4 * (h * s + i * g); const o = s * s + g * g; if (a === 0) return n * Math.sqrt(Math.pow(t[2] - t[0], 2) + Math.pow(e[2] - e[0], 2)); const l = r / (2 * a); const c = n + l; const u = o / a - l * l; const p = c * c + u > 0 ? Math.sqrt(c * c + u) : 0; const x = l * l + u > 0 ? Math.sqrt(l * l + u) : 0; const y = l + Math.sqrt(l * l + u) !== 0 && (c + p) / (l + x) != 0 ? u * Math.log(Math.abs((c + p) / (l + x))) : 0; return Math.sqrt(a) / 2 * (c * p - l * x + y) }, 'getQuadraticArcLength'); const N = s((t, e, n) => ({ x: 2 * (1 - n) * (t[1] - t[0]) + 2 * n * (t[2] - t[1]), y: 2 * (1 - n) * (e[1] - e[0]) + 2 * n * (e[2] - e[1]) }), 'quadraticDerivative'); function O (t, e, n) { const h = C(1, n, t); const i = C(1, n, e); const s = h * h + i * i; return Math.sqrt(s) }s(O, 'BFunc'); var C = s((t, e, n) => { const h = n.length - 1; let i, s; if (h === 0) return 0; if (t === 0) { s = 0; for (let t = 0; t <= h; t++)s += d[h][t] * Math.pow(1 - e, h - t) * Math.pow(e, t) * n[t]; return s }i = new Array(h); for (let t = 0; t < h; t++)i[t] = h * (n[t + 1] - n[t]); return C(t - 1, e, i) }, 'getDerivative'); const D = s((t, e, n) => { let h = 1; let i = t / e; let s = (t - n(i)) / e; let g = 0; for (;h > 0.001;) { const a = n(i + s); const r = Math.abs(t - a) / e; if (r < h)h = r, i += s; else { const g = n(i - s); const a = Math.abs(t - g) / e; a < h ? (h = a, i -= s) : s /= 2 } if (g++, g > 500) break } return i }, 't2length'); const S = class {static { s(this, 'Bezier') }a; b; c; d; length; getArcLength; getPoint; getDerivative; constructor (t, e, n, h, i, s, g, a) { this.a = { x: t, y: e }, this.b = { x: n, y: h }, this.c = { x: i, y: s }, void 0 !== g && void 0 !== a ? (this.getArcLength = m, this.getPoint = T, this.getDerivative = v, this.d = { x: g, y: a }) : (this.getArcLength = _, this.getPoint = q, this.getDerivative = N, this.d = { x: 0, y: 0 }), this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], 1) }getTotalLength = s(() => this.length, 'getTotalLength'); getPointAtLength = s(t => { const e = [this.a.x, this.b.x, this.c.x, this.d.x]; const n = [this.a.y, this.b.y, this.c.y, this.d.y]; const h = D(t, this.length, t => this.getArcLength(e, n, t)); return this.getPoint(e, n, h) }, 'getPointAtLength'); getTangentAtLength = s(t => { const e = [this.a.x, this.b.x, this.c.x, this.d.x]; const n = [this.a.y, this.b.y, this.c.y, this.d.y]; const h = D(t, this.length, t => this.getArcLength(e, n, t)); const i = this.getDerivative(e, n, h); const s = Math.sqrt(i.x * i.x + i.y * i.y); let g; return g = s > 0 ? { x: i.x / s, y: i.y / s } : { x: 0, y: 0 }, g }, 'getTangentAtLength'); getPropertiesAtLength = s(t => { const e = [this.a.x, this.b.x, this.c.x, this.d.x]; const n = [this.a.y, this.b.y, this.c.y, this.d.y]; const h = D(t, this.length, t => this.getArcLength(e, n, t)); const i = this.getDerivative(e, n, h); const s = Math.sqrt(i.x * i.x + i.y * i.y); let g; g = s > 0 ? { x: i.x / s, y: i.y / s } : { x: 0, y: 0 }; const a = this.getPoint(e, n, h); return { x: a.x, y: a.y, tangentX: g.x, tangentY: g.y } }, 'getPropertiesAtLength'); getC = s(() => this.c, 'getC'); getD = s(() => this.d, 'getD')}; const E = class {static { s(this, 'SVGPathProperties') }length = 0; partial_lengths = []; functions = []; initial_point = null; constructor (t) { const e = Array.isArray(t) ? t : l(t); let n; let h = [0, 0]; let i = [0, 0]; let s = [0, 0]; for (let t = 0; t < e.length; t++) { if (e[t][0] === 'M')h = [e[t][1], e[t][2]], s = [h[0], h[1]], this.functions.push(null), t === 0 && (this.initial_point = { x: e[t][1], y: e[t][2] }); else if (e[t][0] === 'm')h = [e[t][1] + h[0], e[t][2] + h[1]], s = [h[0], h[1]], this.functions.push(null); else if (e[t][0] === 'L') this.length += Math.sqrt(Math.pow(h[0] - e[t][1], 2) + Math.pow(h[1] - e[t][2], 2)), this.functions.push(new u(h[0], e[t][1], h[1], e[t][2])), h = [e[t][1], e[t][2]]; else if (e[t][0] === 'l') this.length += Math.sqrt(Math.pow(e[t][1], 2) + Math.pow(e[t][2], 2)), this.functions.push(new u(h[0], e[t][1] + h[0], h[1], e[t][2] + h[1])), h = [e[t][1] + h[0], e[t][2] + h[1]]; else if (e[t][0] === 'H') this.length += Math.abs(h[0] - e[t][1]), this.functions.push(new u(h[0], e[t][1], h[1], h[1])), h[0] = e[t][1]; else if (e[t][0] === 'h') this.length += Math.abs(e[t][1]), this.functions.push(new u(h[0], h[0] + e[t][1], h[1], h[1])), h[0] = e[t][1] + h[0]; else if (e[t][0] === 'V') this.length += Math.abs(h[1] - e[t][1]), this.functions.push(new u(h[0], h[0], h[1], e[t][1])), h[1] = e[t][1]; else if (e[t][0] === 'v') this.length += Math.abs(e[t][1]), this.functions.push(new u(h[0], h[0], h[1], h[1] + e[t][1])), h[1] = e[t][1] + h[1]; else if (e[t][0] === 'z' || e[t][0] === 'Z') this.length += Math.sqrt(Math.pow(s[0] - h[0], 2) + Math.pow(s[1] - h[1], 2)), this.functions.push(new u(h[0], s[0], h[1], s[1])), h = [s[0], s[1]]; else if (e[t][0] === 'C')n = new S(h[0], h[1], e[t][1], e[t][2], e[t][3], e[t][4], e[t][5], e[t][6]), this.length += n.getTotalLength(), h = [e[t][5], e[t][6]], this.functions.push(n); else if (e[t][0] === 'c')n = new S(h[0], h[1], h[0] + e[t][1], h[1] + e[t][2], h[0] + e[t][3], h[1] + e[t][4], h[0] + e[t][5], h[1] + e[t][6]), n.getTotalLength() > 0 ? (this.length += n.getTotalLength(), this.functions.push(n), h = [e[t][5] + h[0], e[t][6] + h[1]]) : this.functions.push(new u(h[0], h[0], h[1], h[1])); else if (e[t][0] === 'S') { if (t > 0 && ['C', 'c', 'S', 's'].indexOf(e[t - 1][0]) > -1) { if (n) { const i = n.getC(); n = new S(h[0], h[1], 2 * h[0] - i.x, 2 * h[1] - i.y, e[t][1], e[t][2], e[t][3], e[t][4]) } } else n = new S(h[0], h[1], h[0], h[1], e[t][1], e[t][2], e[t][3], e[t][4]); n && (this.length += n.getTotalLength(), h = [e[t][3], e[t][4]], this.functions.push(n)) } else if (e[t][0] === 's') { if (t > 0 && ['C', 'c', 'S', 's'].indexOf(e[t - 1][0]) > -1) { if (n) { const i = n.getC(); const s = n.getD(); n = new S(h[0], h[1], h[0] + s.x - i.x, h[1] + s.y - i.y, h[0] + e[t][1], h[1] + e[t][2], h[0] + e[t][3], h[1] + e[t][4]) } } else n = new S(h[0], h[1], h[0], h[1], h[0] + e[t][1], h[1] + e[t][2], h[0] + e[t][3], h[1] + e[t][4]); n && (this.length += n.getTotalLength(), h = [e[t][3] + h[0], e[t][4] + h[1]], this.functions.push(n)) } else if (e[t][0] === 'Q') { if (h[0] === e[t][1] && h[1] === e[t][2]) { const n = new u(e[t][1], e[t][3], e[t][2], e[t][4]); this.length += n.getTotalLength(), this.functions.push(n) } else n = new S(h[0], h[1], e[t][1], e[t][2], e[t][3], e[t][4], void 0, void 0), this.length += n.getTotalLength(), this.functions.push(n); h = [e[t][3], e[t][4]], i = [e[t][1], e[t][2]] } else if (e[t][0] === 'q') { if (e[t][1] !== 0 || e[t][2] !== 0)n = new S(h[0], h[1], h[0] + e[t][1], h[1] + e[t][2], h[0] + e[t][3], h[1] + e[t][4], void 0, void 0), this.length += n.getTotalLength(), this.functions.push(n); else { const n = new u(h[0] + e[t][1], h[0] + e[t][3], h[1] + e[t][2], h[1] + e[t][4]); this.length += n.getTotalLength(), this.functions.push(n) }i = [h[0] + e[t][1], h[1] + e[t][2]], h = [e[t][3] + h[0], e[t][4] + h[1]] } else if (e[t][0] === 'T') { if (t > 0 && ['Q', 'q', 'T', 't'].indexOf(e[t - 1][0]) > -1)n = new S(h[0], h[1], 2 * h[0] - i[0], 2 * h[1] - i[1], e[t][1], e[t][2], void 0, void 0), this.functions.push(n), this.length += n.getTotalLength(); else { const n = new u(h[0], e[t][1], h[1], e[t][2]); this.functions.push(n), this.length += n.getTotalLength() }i = [2 * h[0] - i[0], 2 * h[1] - i[1]], h = [e[t][1], e[t][2]] } else if (e[t][0] === 't') { if (t > 0 && ['Q', 'q', 'T', 't'].indexOf(e[t - 1][0]) > -1)n = new S(h[0], h[1], 2 * h[0] - i[0], 2 * h[1] - i[1], h[0] + e[t][1], h[1] + e[t][2], void 0, void 0), this.length += n.getTotalLength(), this.functions.push(n); else { const n = new u(h[0], h[0] + e[t][1], h[1], h[1] + e[t][2]); this.length += n.getTotalLength(), this.functions.push(n) }i = [2 * h[0] - i[0], 2 * h[1] - i[1]], h = [e[t][1] + h[0], e[t][2] + h[1]] } else if (e[t][0] === 'A') { const n = new p(h[0], h[1], e[t][1], e[t][2], e[t][3], e[t][4] === 1, e[t][5] === 1, e[t][6], e[t][7]); this.length += n.getTotalLength(), h = [e[t][6], e[t][7]], this.functions.push(n) } else if (e[t][0] === 'a') { const n = new p(h[0], h[1], e[t][1], e[t][2], e[t][3], e[t][4] === 1, e[t][5] === 1, h[0] + e[t][6], h[1] + e[t][7]); this.length += n.getTotalLength(), h = [h[0] + e[t][6], h[1] + e[t][7]], this.functions.push(n) } this.partial_lengths.push(this.length) } }getPartAtLength = s(t => { t < 0 ? t = 0 : t > this.length && (t = this.length); let e = this.partial_lengths.length - 1; for (;this.partial_lengths[e] >= t && e > 0;)e--; return e++, { fraction: t - this.partial_lengths[e - 1], i: e } }, 'getPartAtLength'); getTotalLength = s(() => this.length, 'getTotalLength'); getPointAtLength = s(t => { const e = this.getPartAtLength(t); const n = this.functions[e.i]; if (n) return n.getPointAtLength(e.fraction); if (this.initial_point) return this.initial_point; throw new Error('Wrong function at this part.') }, 'getPointAtLength'); getTangentAtLength = s(t => { const e = this.getPartAtLength(t); const n = this.functions[e.i]; if (n) return n.getTangentAtLength(e.fraction); if (this.initial_point) return { x: 0, y: 0 }; throw new Error('Wrong function at this part.') }, 'getTangentAtLength'); getPropertiesAtLength = s(t => { const e = this.getPartAtLength(t); const n = this.functions[e.i]; if (n) return n.getPropertiesAtLength(e.fraction); if (this.initial_point) return { x: this.initial_point.x, y: this.initial_point.y, tangentX: 0, tangentY: 0 }; throw new Error('Wrong function at this part.') }, 'getPropertiesAtLength'); getParts = s(() => { const t = []; for (let e = 0; e < this.functions.length; e++) if (this.functions[e] !== null) { this.functions[e] = this.functions[e]; const n = { start: this.functions[e].getPointAtLength(0), end: this.functions[e].getPointAtLength(this.partial_lengths[e] - this.partial_lengths[e - 1]), length: this.partial_lengths[e] - this.partial_lengths[e - 1], getPointAtLength: this.functions[e].getPointAtLength, getTangentAtLength: this.functions[e].getTangentAtLength, getPropertiesAtLength: this.functions[e].getPropertiesAtLength }; t.push(n) } return t }, 'getParts')}; var F = class {static { s(this, '_svgPathProperties') }inst; constructor (t) { if (this.inst = new E(t), !(this instanceof F)) return new F(t) }getTotalLength = s(() => this.inst.getTotalLength(), 'getTotalLength'); getPointAtLength = s(t => this.inst.getPointAtLength(t), 'getPointAtLength'); getTangentAtLength = s(t => this.inst.getTangentAtLength(t), 'getTangentAtLength'); getPropertiesAtLength = s(t => this.inst.getPropertiesAtLength(t), 'getPropertiesAtLength'); getParts = s(() => this.inst.getParts(), 'getParts')}
